{
  "openapi": "3.0.0",
  "info": {
    "title": "Flow Manager API",
    "description": "This API provides the functionality fo the flow manager product. It's goal is to allow storing, retrieving, and analyzing Attack Flows",
    "contact": {
      "email": "support@infosecanalytics.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "https://api.fm.infosecanalytics.com",
      "description": "API to access flow manager"
    }
  ],
  "tags": [
    {
      "name": "Flows",
      "description": "Storing and querying flows"
    }
  ],
  "paths": {
    "/flows": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Query a flow manager graph.",
        "description": "By passing in a sparql query, you can search the associated\nflow graph for causal connections and associated context.\n",
        "operationId": "getFlows",
        "requestBody": {
          "description": "The query object parsed by Flow Manager",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetFlows"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QueryResult"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response (same as success reponse)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Modify a flow manager graph.",
        "description": "By passing in a sparql query, you can modify the associated\nflow graph.  \n\nWARNING! PREFIX clauses do not work in the SPARQL query of PUT commands due to a backend limitation.  Use the initNs property instead.\n",
        "operationId": "putFlows",
        "requestBody": {
          "description": "The query object parsed by Flow Manager",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutFlows"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QueryResult"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response (same as success reponse)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Insert or update data in a flow graph.",
        "description": "By passing in an attack flow json-schema object or sparql \nINSERT or UPDATE query as a string, insert the associated\ndata into the referenced flow graph.\n",
        "operationId": "postFlows",
        "requestBody": {
          "description": "The query object parsed by Flow Manager",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostFlows"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Confirmation of success or failure of creation/update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          },
          "default": {
            "description": "Confirmation of success or failure of creation/update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PostFlows": {
        "required": [
          "flow",
          "graph",
          "token",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The api version associated witht he query"
          },
          "token": {
            "type": "string",
            "description": "The auth token associated witht he requested graph",
            "format": "uuid"
          },
          "graph": {
            "maximum": 128,
            "minimum": 0,
            "type": "string",
            "description": "The graph to be queried"
          },
          "flow": {
            "description": "The json-schema object, json-ld object or sparql query representing the flow to add.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "initNs": {
            "type": "object",
            "description": "Namespaces to be replaced in a SPARQL query.  This can take the place of PREFIX statements. Each key should be the short name used in the query while the value should be the namespace URI.  For example {'foaf': 'http://xmlns.com/foaf/0.1/'}\n"
          },
          "attack_flow_version": {
            "type": "string",
            "description": "The version of attack flow submitted.",
            "default": "1",
            "enum": [
              "1",
              "2"
            ]
          },
          "builder": {
            "type": "boolean",
            "description": "Was the attack flow generated with the stock Mitre Enginuity CTID\nFLow Builder application?  The reason is the Flow Builder makes some\nopinionated choices that are not optimal for storing multiple flows\ntogether.\n",
            "default": true
          },
          "best_practices": {
            "type": "boolean",
            "description": "Should best practices be applied to the flow during import? This\ninclues using UUIDs for IRIs and storing people as objects.\n",
            "default": true
          }
        }
      },
      "PutFlows": {
        "required": [
          "flow",
          "graph",
          "token",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The api version associated witht he query"
          },
          "token": {
            "type": "string",
            "description": "The auth token associated witht he requested graph",
            "format": "uuid"
          },
          "graph": {
            "maximum": 128,
            "minimum": 0,
            "type": "string",
            "description": "The graph to be queried"
          },
          "flow": {
            "description": "The json-schema object, json-ld object or sparql query representing the flow to add.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "initNs": {
            "type": "object",
            "description": "Namespaces to be replaced in a SPARQL query.  This can take the place of PREFIX statements. Each key should be the short name used in the query while the value should be the namespace URI.  For example {'foaf': 'http://xmlns.com/foaf/0.1/'}\n"
          },
          "attack_flow_version": {
            "type": "string",
            "description": "The version of attack flow submitted.",
            "default": "1",
            "enum": [
              "1",
              "2"
            ]
          },
          "builder": {
            "type": "boolean",
            "description": "Was the attack flow generated with the stock Mitre Enginuity CTID\nFLow Builder application?  The reason is the Flow Builder makes some\nopinionated choices that are not optimal for storing multiple flows\ntogether.\n",
            "default": true
          },
          "best_practices": {
            "type": "boolean",
            "description": "Should best practices be applied to the flow during import? This\ninclues using UUIDs for IRIs and storing people as objects.\n",
            "default": true
          }
        }
      },
      "GetFlows": {
        "required": [
          "flow",
          "graph",
          "token",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The api version associated witht he query"
          },
          "token": {
            "type": "string",
            "description": "The auth token associated witht he requested graph",
            "format": "uuid"
          },
          "graph": {
            "maximum": 128,
            "minimum": 0,
            "type": "string",
            "description": "The graph to be queried"
          },
          "flow": {
            "type": "string",
            "description": "The sparql query to be executed in the graph to be queried.",
            "example": "SELECT $s $p $o WHERE { $s $p $o}"
          },
          "initNs": {
            "type": "object",
            "description": "Namespaces to be replaced in a SPARQL query.  This can take the place of PREFIX statements. Each key should be the short name used in the query while the value should be the namespace URI.  For example {'foaf': 'http://xmlns.com/foaf/0.1/'}\n"
          }
        }
      },
      "QueryResult": {
        "required": [
          "id",
          "result",
          "success",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "result": {
            "type": "string",
            "description": "The returned sparql query as a json string for get queries.\nA confirmation string for flow graph updates.\n'error' if an error occurred.\n",
            "example": "TODO"
          },
          "error": {
            "$ref": "#/components/schemas/QueryResult_error"
          }
        }
      },
      "QueryResult_error": {
        "required": [
          "message",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "authentication_error"
          },
          "message": {
            "type": "string",
            "example": "No graph named my_graph exists for the supplied token."
          }
        }
      }
    }
  }
}